const resolve = require('@rollup/plugin-node-resolve');
const typescript = require('@rollup/plugin-typescript');
const replace = require('@rollup/plugin-replace');
const bundleSize = require('rollup-plugin-bundle-size');
const commonjs = require('@rollup/plugin-commonjs');
const { terser } = require('rollup-plugin-terser');

const NODE_ENV = process.env['NODE_ENV'] || 'development';
const output = {
  format: 'iife',
  sourcemap: NODE_ENV === 'development',
  // This will minify the wrapper code generated by rollup.
  compact: false,
  freeze: false,
  strict: false,
};
const uglifyOptions = {
  compress: {
    loops: false,
    keep_fargs: false,
    unsafe: true,
    pure_getters: true
  },
};
const plugins = [
  resolve(),
  replace({
    'process.env.NODE_ENV': JSON.stringify(NODE_ENV),
    'process.env.__ES6_PROMISE_PATCH__': process.env.KRAKEN_JS_ENGINE === 'quickjs' ? 'import \'es6-promise/dist/es6-promise.auto\';' : ''
  }),
  bundleSize(),
];

module.exports = [
  {
    input: 'src/index.ts',
    output: Object.assign({ file: 'dist/main.js' }, output),
    plugins: [
      ...plugins,
      typescript(),
      NODE_ENV === 'development' ? null : terser(uglifyOptions),
    ],
    context: 'window'
  },
  {
    input: 'src/test/index.js',
    output: Object.assign({ file: 'dist/test.js' }, output),
    plugins: [
      ...plugins,
      commonjs(),
    ],
    onwarn(warning, warn) {
      // suppress eval warnings
      if (warning.code === 'EVAL') return
      warn(warning)
    },
  }
];
